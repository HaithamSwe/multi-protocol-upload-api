// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// S3 is an autogenerated mock type for the S3 type
type S3 struct {
	mock.Mock
}

// PresignUrl provides a mock function with given fields: objectKey, expires
func (_m *S3) PresignUrl(objectKey string, expires int64) string {
	ret := _m.Called(objectKey, expires)

	if len(ret) == 0 {
		panic("no return value specified for PresignUrl")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, int64) string); ok {
		r0 = rf(objectKey, expires)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Upload provides a mock function with given fields: fileData, fileName
func (_m *S3) Upload(fileData []byte, fileName string) (string, error) {
	ret := _m.Called(fileData, fileName)

	if len(ret) == 0 {
		panic("no return value specified for Upload")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, string) (string, error)); ok {
		return rf(fileData, fileName)
	}
	if rf, ok := ret.Get(0).(func([]byte, string) string); ok {
		r0 = rf(fileData, fileName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func([]byte, string) error); ok {
		r1 = rf(fileData, fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewS3 creates a new instance of S3. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewS3(t interface {
	mock.TestingT
	Cleanup(func())
}) *S3 {
	mock := &S3{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
